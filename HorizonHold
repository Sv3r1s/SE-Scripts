//------------BEGIN--------------
        //---------Version-2.2-----------
        string ShipName = "Ship1";
        List<IMyTerminalBlock> GridBlocks;
        List<IMyGyro> gyros;
        IMyShipController cockpit;
        float gyromult = 2;

        //*--RENAME-THE-ShipName-AND-DELETE-THIS----* public Program()
        {
            GridBlocks = new List<IMyTerminalBlock>();
            GridTerminalSystem.SearchBlocksOfName(ShipName, GridBlocks);
            cockpit = GridBlocks.OfType<IMyCockpit>().First();
            gyros = new List<IMyGyro>();
            gyros = GridBlocks.OfType<IMyGyro>().ToList();
        }

        public void Main(string argument)
        {
            if (argument == ("Start"))
            {
                Runtime.UpdateFrequency = UpdateFrequency.Update1;
                foreach (IMyGyro gyro in gyros)
                {
                    gyro.GyroOverride = true;
                }
            }
            else if (argument == ("Stop"))
            {
                Runtime.UpdateFrequency = UpdateFrequency.None;
                foreach (IMyGyro gyro in gyros)
                {
                    gyro.GyroOverride = false;
                }
            }
            else if (argument == "Init") Init();
            Vector3D gravvector = Vector3D.Normalize(cockpit.GetNaturalGravity());

            double gb = gravvector.Dot(cockpit.WorldMatrix.Backward);
            double gl = gravvector.Dot(cockpit.WorldMatrix.Left);
            double gd = gravvector.Dot(cockpit.WorldMatrix.Down);

            float Pitch = (float)Math.Atan2(gb, gd);
            float Roll = (float)Math.Atan2(gl, gd);
            float yaw = cockpit.RotationIndicator.Y;
            foreach (IMyGyro gyro in gyros)
            {
                gyro.Yaw = yaw * 0.5f;
                gyro.Pitch = Pitch * gyromult;
                gyro.Roll = Roll * gyromult;
            }
        }
        void Init()
        {
            List<IMyTerminalBlock> AllBlocks = new List<IMyTerminalBlock>();
            GridTerminalSystem.GetBlocks(AllBlocks);
            //------Search-for-new-blocks--------
            foreach (IMyTerminalBlock block in GridBlocks)
            {
                AllBlocks.Remove(block);
            }
            //------Rename-new-blocks----------
            foreach (IMyTerminalBlock block in AllBlocks)
            {
                block.CustomName = block.CustomName + " (" + ShipName + ")";
                GridBlocks.Add(block);
            }
        }
        //------------END--------------
